{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../client/Nav.svelte",
    "../../node_modules/yrv/src/Router.svelte",
    "../../node_modules/yrv/src/Route.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {user} from './store.js';\n    import {Link} from 'yrv';\n\n    let isActive = false;\n    function toggleMenu(){\n        isActive = !isActive;\n    }\n</script>\n\n<style>\n\t:global([aria-current]) { font-weight: bold; }\n</style>\n\n<nav class=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\n    <div class=\"navbar-brand\">\n        <a class=\"navbar-item\" href=\"https://github.com/sachinbhutani/svelte-cr\">\n        <strong>Svelte-Cr</strong>\n        </a>\n        <div role=\"button\" class=\"navbar-burger {isActive? 'is-active' : ''}\" aria-label=\"menu\" aria-expanded=\"false\" on:click={toggleMenu}>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n        </div>\n    </div>\n    <div class=\"navbar-menu  {isActive? 'is-active' : ''}\">\n        <div class=\"navbar-start\">\n        <Link class=\"navbar-item\" href=\"/\"> Home </Link>\n        <Link class=\"navbar-item\" href=\"#about\"> Svelte Route </Link>\n            <div class=\"navbar-item has-dropdown is-hoverable\">\n                <a class=\"navbar-link\" href=\"/api\">\n                Server Routes\n                </a>\n                    <div class=\"navbar-dropdown\">\n                    <a class=\"navbar-item\" href=\"/api\">\n                        String\n                    </a>\n                    <a class=\"navbar-item\" href=\"/api/message\">\n                        JSON\n                    </a>\n                    </div>\n            </div>\n        <Link class=\"navbar-item\" href=\"#app/common?p1=test&p2=3\"> Common Route </Link>\n        {#if $user}<Link class=\"navbar-item\" href=\"#secure\"> Secure Route </Link>{/if}\n        <Link class=\"navbar-item\" href=\"#catch-it\"> Catch All </Link>\n        </div>\n    </div>\n\n    <div class=\"navbar-end\">\n    {#if !$user}\n        <div class=\"navbar-item\">\n        <div class=\"buttons\">\n          <Link class=\"button is-light\" href=\"#login\">\n            Log in\n          </Link>\n        </div>\n        </div>\n    {:else}\n        <div class=\"navbar-item\">\n            Hi {$user}\n        </div>\n        <div class=\"navbar-item\">\n        <div class=\"buttons\">\n          <Link class=\"button is-danger\" href=\"#logout\">\n            Log Out\n          </Link>\n        </div>\n        </div>\n    {/if}\n    </div>\n\n</nav>\n",
    "<script context=\"module\">\n  import { writable } from 'svelte/store';\n  import { CTX_ROUTER, router } from './utils';\n  import {\n    baseRouter, addRouter, findRoutes, doFallback,\n  } from './router';\n</script>\n\n<script>\n  import {\n    onMount, onDestroy, getContext, setContext,\n  } from 'svelte';\n\n  let cleanup;\n  let failure;\n  let fallback;\n\n  export let path = '/';\n  export let disabled = false;\n  export let condition = null;\n  export let nofallback = false;\n\n  const routerContext = getContext(CTX_ROUTER);\n  const basePath = routerContext ? routerContext.basePath : writable(path);\n\n  const fixedRoot = $basePath !== path && $basePath !== '/'\n    ? `${$basePath}${path !== '/' ? path : ''}`\n    : path;\n\n  try {\n    if (condition !== null && typeof condition !== 'function') {\n      throw new TypeError(`Expecting condition to be a function, given '${condition}'`);\n    }\n\n    if (path.charAt() !== '#' && path.charAt() !== '/') {\n      throw new TypeError(`Expecting a leading slash or hash, given '${path}'`);\n    }\n  } catch (e) {\n    failure = e;\n  }\n\n  function assignRoute(key, route, detail) {\n    key = key || Math.random().toString(36).substr(2);\n\n    // consider as nested routes if they does not have any segment\n    const nested = !route.substr(1).includes('/');\n    const handler = { key, nested, ...detail };\n\n    let fullpath;\n\n    baseRouter.mount(fixedRoot, () => {\n      fullpath = baseRouter.add(route, handler);\n      fallback = (handler.fallback && key) || fallback;\n    });\n\n    findRoutes();\n\n    return [key, fullpath];\n  }\n\n  function unassignRoute(route) {\n    baseRouter.rm(route);\n    findRoutes();\n  }\n\n  function onError(err) {\n    failure = err;\n\n    if (failure && fallback) {\n      doFallback(failure, fallback);\n    }\n  }\n\n  onMount(() => {\n    cleanup = addRouter(fixedRoot, fallback, onError);\n  });\n\n  onDestroy(() => {\n    if (cleanup) cleanup();\n  });\n\n  setContext(CTX_ROUTER, {\n    basePath,\n    assignRoute,\n    unassignRoute,\n  });\n\n  $: if (condition) {\n    disabled = !condition($router);\n  }\n</script>\n\n<style>\n  [data-failure] {\n    border: 1px dashed silver;\n  }\n</style>\n\n{#if !disabled}\n  <slot />\n{/if}\n\n{#if failure && !fallback && !nofallback}\n  <fieldset data-failure>\n    <legend>Router failure: {path}</legend>\n    <pre>{failure}</pre>\n  </fieldset>\n{/if}\n",
    "<script context=\"module\">\n  import { writable } from 'svelte/store';\n  import { routeInfo } from './router';\n  import { CTX_ROUTER, CTX_ROUTE } from './utils';\n\n  function getProps(given, required) {\n    const { props: sub, ...others } = given;\n\n    // prune all declared props from this component\n    required = !Array.isArray(required)\n      ? Object.keys(required)\n      : required;\n\n    required.forEach(k => {\n      delete others[k];\n    });\n\n    return {\n      ...sub,\n      ...others,\n    };\n  }\n</script>\n\n<script>\n  import { onDestroy, getContext, setContext } from 'svelte';\n\n  export let key = null;\n  export let path = '/';\n  export let exact = null;\n  export let disabled = false;\n  export let fallback = null;\n  export let component = null;\n  export let condition = null;\n  export let redirect = null;\n\n  const routeContext = getContext(CTX_ROUTE);\n  const routerContext = getContext(CTX_ROUTER);\n\n  const { assignRoute, unassignRoute } = routerContext || {};\n\n  const routePath = routeContext ? routeContext.routePath : writable(path);\n\n  let activeRouter = null;\n  let activeProps = {};\n  let fullpath;\n  let failure;\n\n  const fixedRoot = $routePath !== path && $routePath !== '/'\n    ? `${$routePath}${path !== '/' ? path : ''}`\n    : path;\n\n  try {\n    if (redirect !== null && !/^(?:\\w+:\\/\\/|\\/)/.test(redirect)) {\n      throw new TypeError(`Expecting valid URL to redirect, given '${redirect}'`);\n    }\n\n    if (condition !== null && typeof condition !== 'function') {\n      throw new TypeError(`Expecting condition to be a function, given '${condition}'`);\n    }\n\n    if (path.charAt() !== '#' && path.charAt() !== '/') {\n      throw new TypeError(`Expecting a leading slash or hash, given '${path}'`);\n    }\n\n    if (!assignRoute) {\n      throw new TypeError(`Missing top-level <Router>, given route: ${path}`);\n    }\n\n    [key, fullpath] = assignRoute(key, fixedRoot, {\n      condition, redirect, fallback, exact,\n    });\n  } catch (e) {\n    failure = e;\n  }\n\n  $: if (key) {\n    /* global arguments */\n    activeRouter = !disabled && $routeInfo[key];\n    activeProps = getProps($$props, arguments[0].$$.props);\n  }\n\n  onDestroy(() => {\n    if (unassignRoute) {\n      unassignRoute(fullpath);\n    }\n  });\n\n  setContext(CTX_ROUTE, {\n    routePath,\n  });\n</script>\n\n<style>\n  [data-failure] {\n    color: red;\n  }\n</style>\n\n{#if failure}\n  <p data-failure>{failure}</p>\n{/if}\n\n{#if activeRouter}\n  {#if component}\n    <svelte:component this={component} router={activeRouter} {...activeProps} />\n  {:else}\n    <slot router={activeRouter} props={activeProps} />\n  {/if}\n{/if}\n"
  ],
  "names": [],
  "mappings": "AAWS,cAAc,AAAE,CAAC,AAAC,WAAW,CAAE,IAAI,AAAE,CAAC;ACkF7C,CAAC,YAAY,CAAC,cAAC,CAAC,AACd,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,MAAM,AAC3B,CAAC;ACDD,CAAC,YAAY,CAAC,cAAC,CAAC,AACd,KAAK,CAAE,GAAG,AACZ,CAAC"
}